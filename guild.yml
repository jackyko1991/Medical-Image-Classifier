- model: Medical Image Classifier
  description: CNN Classifier using Tensorflow for medical images with NIFTI input
  operations:
    prepare-train-config:
      description: Prepare the configuration files for training
      main: configs.prepare_training_config
      requires:
        - file: ./configs
          name: config_dir
      flags-dest: args
      flags-import:
        - tmp_json
        - data_dir
        - fold
        - log_dir
        - ckpt_dir
        - max_steps
        - epoches
        - output
        - pipeline
        - learning_rate

    prepare-test-config:
      description: Prepare the configuration files for testing
      main: configs.prepare_testing_config
      requires:
        - file: ./configs
          name: config_dir
        - file: /mnt/DIIR-JK-NAS/data/carotid/results
      flags-dest: args
      flags-import:
        - tmp_json
        - data_dir
        - output
        - model
        - ckpt
        - csv
        - pipeline

    train:
      description: Train the medical image classifier
      main: main --phase TRAIN
      flags-dest: args
      flags-import:
        - config_json
      flags:
        config_json: config_out.json
      requires:
        - operation: prepare-train-config
        - file: /mnt/DIIR-JK-NAS/data/carotid/data_kfold/
        - file: ./pipeline
      output-scalars:
        - '(\value): step (?P<step>\step): get next element ok'
        - '(\value): Training loss: (?P<train_loss>\value)'
        - '(\value): Training accuracy: (?P<train_accuracy>\value)'
        - '(\value): Training precision: (?P<train_precision>\value)'
        - '(\value): Training sensitivity  (?P<train_sensitivity>\value)'
        - '(\value): Training specificity: (?P<train_specificity>\value)'
        - '(\value): Training auc: (?P<train_auc>\value)'
        - '(\value): Testing loss: (?P<test_loss>\value)'
        - '(\value): Testing accuracy: (?P<test_accuracy>\value)'
        - '(\value): Testing precision: (?P<test_precision>\value)'
        - '(\value): Testing sensitivity  (?P<test_sensitivity>\value)'
        - '(\value): Testing specificity: (?P<test_specificity>\value)'
        - '(\value): Testing auc: (?P<test_auc>\value)'
        
    predict:
      description: Perform prediction on given dataset
      main: main --phase PREDICT
      flags-import:
        - config_json
      flags:
        config_json: config_out.json
      requires: 
        - operation: prepare-test-config
        - file: /mnt/DIIR-JK-NAS/data/carotid/data_kfold/
        - file: ./pipeline

    benchmark:
      description: Perform benchmark according to prediction results
      main: utils.benchmark
      flags-import:
         - 

    pipeline-all:
      description: Machine learning pipeline for medical image classification
      flags: 
        fold: [0,1,2,3,4]
        max_steps: 1500
        dataset: [image, cfd_mag, mixed_mag]
        learning_rate: 1e-4
      steps:
        - run: pipeline-train
          flags:
            fold: ${fold}
            dataset: ${dataset}
            max_steps: ${max_steps}
            learning_rate: ${learning_rate}
        - run: pipeline-post-train
          flags:
            fold: ${fold}
            dataset: ${dataset}
            step: ${max_steps}
            learning_rate: ${learning_rate}
  
    pipeline-train:
      description: Training pipeline
      flags:
        fold: [0,1,2,3,4]
        dataset: [image, cfd_mag, mixed_mag]
        max_steps: 10
        epoches: 999999 # control training termination by max_steps instead of epoches when use guild automated pipeline
        learning_rate: 1e-4
      steps:
        - run: prepare-train-config
          flags:
            tmp_json: configs/config_carotid_resnet_${dataset}.json
            data_dir: "/mnt/DIIR-JK-NAS/data/carotid/data_kfold"
            fold: ${fold}
            max_steps: ${max_steps}
            pipeline: pipeline/pipeline_carotid_${dataset}.yaml
            # output to system directory
            log_dir: "/mnt/DIIR-JK-NAS/projects/Medical-Image-Classifier/tmp_carotid/${dataset}_resnet_fold_${fold}_LR_${learning_rate}_2_xent_mom-0.9/log"
            ckpt_dir: "/mnt/DIIR-JK-NAS/projects/Medical-Image-Classifier/tmp_carotid/${dataset}_resnet_fold_${fold}_LR_${learning_rate}_2_xent_mom-0.9/ckpt"
            # # output to guild run directory
            # log_dir: "./tmp_carotid"
            # ckpt_dir: "./tmp_carotid"
        - run: train

    pipeline-post-train:
      description: Post training pipeline
      flags:
        fold: [0,1,2,3,4]
        dataset: [image, cfd_mag, mixed_mag]
        step: [9]
        phase: [train, test]
        learning_rate: 1e-4
      steps:
        - run: prepare-test-config
          flags:
            tmp_json: ./configs/config_carotid_resnet_${dataset}.json
            data_dir: /mnt/DIIR-JK-NAS/data/carotid/data_kfold/fold_${fold}/${phase}
            csv: /mnt/DIIR-JK-NAS/data/carotid/results/resnet_${dataset}_fold_${fold}_LR_${learning_rate}_2_xent_mom-0.9_${phase}_${step}.csv
            model: /mnt/DIIR-JK-NAS/projects/Medical-Image-Classifier/tmp_carotid/${dataset}_resnet_fold_${fold}_LR_${learning_rate}_2_xent_mom-0.9/ckpt/checkpoint-${step}.meta
            ckpt: /mnt/DIIR-JK-NAS/projects/Medical-Image-Classifier/tmp_carotid/${dataset}_resnet_fold_${fold}_LR_${learning_rate}_2_xent_mom-0.9/ckpt/checkpoint-${step}
            pipeline: pipeline/pipeline_carotid_${dataset}.yaml
        - run: predict
        - run: benchmark
          flags:
            ground_truth: 
            predict: /mnt/DIIR-JK-NAS/data/carotid/results/resnet_${dataset}_fold_${fold}_LR_${learning_rate}_2_xent_mom-0.9_${phase}_${step}.csv